{"version":3,"sources":["logo.svg","components/Jumbotron.js","components/Card.js","components/Msg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","react_default","a","createElement","className","Card","props","imgStyle","backgroundImage","concat","image","backgroundColor","color","onClick","data-id","id","alt","style","Msg","react_animate_on_change_default","baseClassName","message","animationClassName","animate","diff","App","state","cards","score","highscore","clickedcards","randomizeCards","cardcontainer","document","querySelector","i","children","length","appendChild","Math","random","handleClick","e","preventDefault","_this","handleCard","target","getAttribute","includes","resetGame","incrementCount","setState","resetScore","push","setHighScore","console","log","this","_this2","components_Jumbotron","components_Msg","map","card","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a8cdb61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n        <h3><strong>Clicky Game</strong></h3>\n        <h5>Click on an image to earn points, but don't click on any more than once!</h5>\n    </div>\n  );\n}\n\n\nexport default Jumbotron;\n","import React from \"react\";\n\n\n\n\nfunction Card(props) {\n  \n    var imgStyle = {\n        backgroundImage: `url(${props.image})`,\n        backgroundColor: `${props.color}`\n      };\n  return (\n\n    <div className=\"card\" onClick={props.onClick}>\n        <div \n          className=\"card-img\" \n          data-id={props.id}\n          alt=\"cardimg\"\n          style={imgStyle}\n        />\n      </div>\n  );\n}\n\n\nexport default Card;\n","import AnimateOnChange from 'react-animate-on-change'\nimport React from \"react\";\n\nconst Msg = (props) =>\n  <AnimateOnChange\n    baseClassName={props.message}\n    animationClassName=\"message--flash\"\n    animate={props.diff != 0}>\n      <strong>{props.message}</strong>\n  </AnimateOnChange>\n\n  export default Msg","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css'\nimport Jumbotron from './components/Jumbotron'\nimport Card from './components/Card'\nimport Msg from './components/Msg'\nimport cards from './cards.json'\n\n// CommonJS:\n// const AnimateOnChange = require('react-animate-on-change').default\n \nclass App extends Component {\n  state = {\n    cards,\n    score: [],\n    highscore: [],\n    clickedcards: [],\n    message: []\n  };\n  \n  componentDidMount() {\n    this.randomizeCards()\n    this.setState({score: 0})\n    this.setState({highscore: 0})\n  }\n\n  randomizeCards = () => {\n\n    var cardcontainer = document.querySelector('.card-area');\n    for (var i = cardcontainer.children.length; i >= 0; i--) {\n        cardcontainer.appendChild(cardcontainer.children[Math.random() * i | 0]);\n    }\n  }\n\n  handleClick = (e) => {\n    e.preventDefault()\n    this.randomizeCards()\n    this.handleCard(e.target.getAttribute('data-id'))\n  }\n\n  handleCard = id => {\n    this.state.clickedcards.includes(id) ? this.resetGame() : this.incrementCount(id)\n  };\n\n  resetGame = () => {\n    this.setState((state) => {return {message: \"incorrect\"}})\n    this.resetScore()\n    this.setState((state) => {return {clickedcards: []}})\n  }\n\n\n  incrementCount = (id) => {\n    this.setState((state) => {return {message: \"correct\"}})\n    this.state.clickedcards.push(id)\n    this.setState((state) => {\n      // Important: read `state` instead of `this.state` when updating.\n      return {score: state.score + 1}\n    })\n    this.state.score >= this.state.highscore ? this.setHighScore() : console.log(\"high score increased\")\n\n  }\n\n  setHighScore = () => {\n    this.setState((state) => {\n      // Important: read `state` instead of `this.state` when updating.\n      return {highscore: state.score}\n    })\n  }\n\n  resetScore = () => {\n    this.setState((state) => {\n      // Important: read `state` instead of `this.state` when updating.\n      return {score: 0}\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Jumbotron />\n        <div className=\"score-container row d-flex justify-content-between\">\n          <div className=\"score-left col\">\n            Score: {this.state.score} \n          </div>\n          <div className=\"game-msg col\">\n          <Msg message={this.state.message} />\n          </div>\n      \n          <div className=\"score-right col\">\n            High Score: {this.state.highscore} \n          </div>\n        </div>\n        <div className=\"card-area card-columns\">\n            {this.state.cards.map(card =>\n            <div className=\"card-wrap\">\n            <Card\n              id = {card.id}\n              key = {card.id}\n              image={card.image}\n              color={card.color}\n              onClick={this.handleClick}\n            />\n            </div>\n            )}\n\n            </div>\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}